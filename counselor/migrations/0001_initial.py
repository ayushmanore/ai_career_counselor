# Generated by Django 4.2.7 on 2025-09-04 14:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='StudentAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(13), django.core.validators.MaxValueValidator(100)])),
                ('education_level', models.CharField(choices=[('High School', 'High School'), ('Undergraduate', 'Undergraduate'), ('Graduate', 'Graduate'), ('Other', 'Other')], max_length=20)),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('subject_scores', models.JSONField(default=dict, help_text='Dictionary of subject scores')),
                ('personality_traits', models.JSONField(default=dict, help_text='Dictionary of personality traits and interests')),
                ('career_interests', models.TextField(blank=True, help_text='Comma-separated list of career interests')),
                ('extracurricular_activities', models.TextField(blank=True)),
                ('future_goals', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('STEM', 'Science, Technology, Engineering, Mathematics'), ('Arts', 'Arts and Humanities'), ('Business', 'Business and Commerce'), ('Social', 'Social Sciences'), ('Language', 'Languages'), ('Physical', 'Physical Education and Sports')], max_length=20)),
                ('weight', models.FloatField(default=1.0, help_text='Weight factor for this subject in career matching', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(2.0)])),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Career',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Technology', 'Technology and IT'), ('Healthcare', 'Healthcare and Medicine'), ('Engineering', 'Engineering'), ('Business', 'Business and Finance'), ('Education', 'Education and Training'), ('Creative', 'Creative and Arts'), ('Science', 'Science and Research'), ('Law', 'Law and Legal'), ('Social', 'Social Services'), ('Other', 'Other Fields')], max_length=20)),
                ('min_score_threshold', models.IntegerField(default=60, help_text='Minimum average score required', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('growth_prospects', models.CharField(choices=[('High', 'High Growth (>10% annually)'), ('Medium', 'Medium Growth (5-10% annually)'), ('Low', 'Low Growth (<5% annually)'), ('Stable', 'Stable Demand')], default='Medium', max_length=10)),
                ('salary_range', models.CharField(blank=True, help_text='e.g., $50,000 - $80,000', max_length=100)),
                ('skills_required', models.TextField(blank=True, help_text='Comma-separated skills')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('required_subjects', models.ManyToManyField(blank=True, to='counselor.subject')),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CareerRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_career_name', models.CharField(blank=True, max_length=200)),
                ('confidence_score', models.FloatField(help_text='AI confidence in this recommendation (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reasoning', models.TextField(help_text='AI explanation for this recommendation')),
                ('rules_applied', models.JSONField(default=list, help_text='List of FOPL rules that fired for this recommendation')),
                ('rank', models.IntegerField(help_text='Recommendation rank (1 = best match)', validators=[django.core.validators.MinValueValidator(1)])),
                ('match_percentage', models.FloatField(help_text='Percentage match with student profile', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='counselor.studentassessment')),
                ('career', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='counselor.career')),
            ],
            options={
                'ordering': ['assessment', 'rank'],
                'unique_together': {('assessment', 'rank')},
            },
        ),
    ]
